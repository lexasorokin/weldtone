<?php

/**
 * @file
 * Implement ajax form submit functionality.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\PrependCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Render\Element\StatusMessages;

function pdfview_calc_tax_a($cif) {
  $tax_a_table = [
    0    => 0,
    100  => 6.5,
    500  => 18.5,
    1000 => 24.0
  ];

  $tax_a = 0;

  foreach ($tax_a_table as $threshold => $charge) {
    if ($cif >= $threshold) {
      $tax_a = $charge;
    }
  }

  return $tax_a;
}

function pdfview_calc_vat_multiple($package_data) {



  if (empty($package_data['items']) || !is_array($package_data['items'])) {

    if (!empty($package_data['invoice_value']) && !empty($package_data['weight'])) {
      $vat_data = pdfview_calc_vat($package_data, TRUE);

      $vat_charge = $vat_data['vat'];
      $cif = $vat_data['cif'];

      $vat_charge += pdfview_calc_tax_a($cif);
      return $vat_charge;
    }

    return 0;
  }

  $vat_total = 0;
  $cif_total = 0;

  foreach ($package_data['items'] as $item) {
    $package_data_temp = $package_data;

    //ksm($item);

    if (empty($item['weight'])) {
      $item['weight'] = 1;
    }

    if (empty($item['vat_table_term_tid'])) {
      $item['vat_table_term_tid'] = 0;
    }

    $package_data_temp['invoice_value'] = $item['invoice_value'];
    $package_data_temp['weight'] = $item['weight'];
    $package_data_temp['vat_table_term_tid'] = $item['vat_table_term_id'];
    $package_data_temp['qty'] = $item['qty'];

    $vat_data = pdfview_calc_vat($package_data_temp, TRUE);
    $vat_total += $vat_data['vat'];
    $cif_total += $vat_data['cif'];
  }

  $vat_total += pdfview_calc_tax_a($cif_total);

  return $vat_total;
}

function pdfview_get_total_weight($package_data) {
  $total = 0;
  foreach ($package_data['items'] as $item) {
    $total += !empty($item['weight']) ? $item['weight'] : 0;
  }

  return $total;
}

function pdfview_get_total_value($package_data) {
  $total = 0;
  foreach ($package_data['items'] as $item) {
    if (empty($item['qty'])) {
      $item['qty'] = 1;
    }
    $total += $item['invoice_value'] * $item['qty'];
  }

  return $total;
}

function pdfview_calc_vat($package_data, $return_cif = FALSE) {
//ksm($package_data);
  $vat_rate = 17;

  if (empty($package_data['invoice_value'])) {
    if ($return_cif) {
      return [
        'vat' => 0,
        'cif' => 0,
      ];
    }
    return 0;
  }

  if (empty($package_data['weight'])) {
    $package_data['weight'] = 1;
  }

  $config = \Drupal::configFactory()->getEditable('pdfview.settings');

  $vat_bracket_number = 0;

  if (empty($package_data['qty'])) {
    $package_data['qty'] = 1;
  }

  for ($i = 1; $i < 4; $i++) {
    $curent_min = $config->get('vat_' . $i . '_min');

    if (($package_data['invoice_value'] * $package_data['qty']) >= $curent_min) {
      $vat_bracket_number = $i;
    }
  }

  $vat_table_term_tid = NULL;

  if (!empty($package_data['vat_table_term_tid'])) {
    $vat_table_term_tid = $package_data['vat_table_term_tid'];
  }

  //ksm($package_data);
  //ksm($vat_bracket_number);

  if ($vat_bracket_number) {
    if (!empty($vat_table_term_tid)) {
      $term = \Drupal::entityManager()->getStorage('taxonomy_term')->load($vat_table_term_tid);

      if ($term) {

        $vat_rate_term = $term->get('field_cfi_vat_tax_rate_' . $vat_bracket_number);

        if ($vat_rate_term) {
          $vat_rate_term = reset_m($vat_rate_term->getValue());

          if ($vat_rate_term) {
            $vat_rate = $vat_rate_term;
          }
        }
      }
    }
  }
  else {
    $vat_rate = 0;
  }


  $cif = $package_data['weight'] * 5 + $package_data['invoice_value'];

  //ksm($cif);

  $cif = $cif * $package_data['qty'];

  //ksm($cif);

  $vat_charge = round($cif * $vat_rate / 100, 2);

  if ($return_cif) {
    return [
      'vat' => $vat_charge,
      'cif' => $cif,
    ];
  }

  return $vat_charge;
}

function pdfview_calc_handling($package_data) {
  $config = \Drupal::configFactory()->getEditable('pdfview.settings');

  //ksm($package_data);

  $handling_multiplier = 1;

  if (!empty($package_data['original_packages_count'])) {
    $handling_multiplier = $package_data['original_packages_count'];
  }

  return !empty($config->get('handling_fix_price')) ? $config->get('handling_fix_price') *
      $handling_multiplier : 0;
}

function pdfview_calc_unite($package_data) {

  if (empty($package_data['calc_unite'])) {
    return 0;
  }

  $config = \Drupal::configFactory()->getEditable('pdfview.settings');

  $vendors_count = 1;

  if (!empty($package_data['vendors_count'])) {
    $vendors_count = $package_data['vendors_count'];
  }

  return !empty($config->get('unite_fix_price')) ? $config->get('unite_fix_price') *
      $vendors_count : 0;
}

function pdfview_calc_insurance($package_data) {

  if (!empty($package_data['items'])) {
    $package_data['invoice_value'] = pdfview_get_total_value($package_data);
  }

  if (empty($package_data['invoice_value'])) {
    return 0;
  }

  $config = \Drupal::configFactory()->getEditable('pdfview.settings');

  $threshold = !empty($config->get('insurance_threshold')) ? $config->get('insurance_threshold')
        : 0;

  $fix_price = !empty($config->get('insurance_fix_price')) ? $config->get('insurance_fix_price')
        : 0;

  $percent = !empty($config->get('insurance_percent')) ? $config->get('insurance_percent')
        : 0;



  if ($package_data['invoice_value'] < $threshold) {
    return $fix_price;
  }

  return round($package_data['invoice_value'] * $percent / 100, 2);
}

function pdfview_calc_make_image($package_data) {
  if (empty($package_data['calc_make_image'])) {
    return 0;
  }

  $config = \Drupal::configFactory()->getEditable('pdfview.settings');

  $price = !empty($config->get('make_image_price')) ? $config->get('make_image_price')
        : 0;

  return $price;
}

function pdfview_calc_selfcheck($package_data) {
//ksm($package_data);
  if (empty($package_data['calc_selfcheck'])) {
    return 0;
  }

  if (!empty($package_data['items'])) {
    $package_data['invoice_value'] = pdfview_get_total_value($package_data);
  }

  $config = \Drupal::configFactory()->getEditable('pdfview.settings');

  $threshold = !empty($config->get('selfcheck_threshold')) ? $config->get('selfcheck_threshold')
        : 0;

  $fix_price = !empty($config->get('selfcheck_fix_price')) ? $config->get('selfcheck_fix_price')
        : 0;

  $percent = !empty($config->get('selfcheck_percent')) ? $config->get('selfcheck_percent')
        : 0;

  if (empty($package_data['invoice_value'])) {
    $package_data['invoice_value'] = 0;
  }

  if ($package_data['invoice_value'] < $threshold) {
    return $fix_price;
  }

  return round($package_data['invoice_value'] * $percent / 100, 2);
}

function pdfview_calc_weight_charge($package_data) {

  //ksm($package_data);
  if (!empty($package_data['items'])) {
    $package_data['invoice_value'] = pdfview_get_total_value($package_data);
  }

  if (!empty($package_data['items'])) {
    $total_weight_from_items = pdfview_get_total_weight($package_data);
    if ($total_weight_from_items) {
      $package_data['weight'] = $total_weight_from_items;
    }
  }
  /*
    if (empty($package_data['invoice_value']) || empty($package_data['weight']) ||
    empty($package_data['width']) || empty($package_data['height']) || empty($package_data['length'])) {
    return 0;
    }
   */
  if (empty($package_data['weight']) || empty($package_data['width']) || empty($package_data['height']) ||
      empty($package_data['length'])) {
    return 0;
  }

  $config = \Drupal::configFactory()->getEditable('pdfview.settings');

  $threshold = !empty($config->get('weight_threshold')) ? $config->get('weight_threshold')
        : 0;

  $fix_price = !empty($config->get('weight_fix_price')) ? $config->get('weight_fix_price')
        : 0;
  /*
    if ($package_data['weight'] <= 1) {
    return $threshold;
    }


    return round(($threshold + $fix_price * ($package_data['weight'] - 1)), 2); */


  $volume_weight = round(round($package_data['length'], 2) * round($package_data['width'],
          2) * round($package_data['height'], 2) / 366, 2);

  $calc_weight = max($package_data['weight'], $volume_weight);

  //ksm($calc_weight);

  if ($calc_weight <= $threshold) {
    return 0;
  }
  else {
    return $fix_price * ($calc_weight - $threshold);
  }

  /*
    if ($package_data['weight'] < $threshold) {
    return $fix_price * $package_data['weight'];
    }

    $volume = $package_data['width'] * $package_data['height'] * $package_data['length'];

    return $volume / $package_data['weight'] * $fix_price; */
}

function pdfview_calc_clearance($package_data) {
  return 0;
}

function pdfview_calc_delivery($package_data) {
  return 0;
}

function pdfview_calc_tax($package_data) {

  return 0;
}

function pdfview_calc_storage($package_data) {
  if (!empty($package_data['created'])) {
    $config = \Drupal::configFactory()->getEditable('pdfview.settings');

    $current_date = time();

    $time_diff = floor(($current_date - $package_data['created']) / 86400);

    $free_days = !empty($config->get('storage_free_days')) ? $config->get('storage_free_days')
          : 0;

    $price_per_week = !empty($config->get('storage_price_per_week')) ? $config->get('storage_price_per_week')
          : 0;

    if ($time_diff > $free_days) {
      $price_per_day = $price_per_week / 7;

      $days_paid = $time_diff - $free_days;

      return $days_paid * $price_per_day;
    }
  }
  return 0;
}

function pdfview_calc_all($package_data, $options = []) {

//ksm($package_data);
  $out = [
    'storage'       => [
      'result' => pdfview_calc_storage($package_data),
      'label'  => t('Storage'),
      'type'   => 'required',
    ],
    'vat'           => [
      'result' => pdfview_calc_vat_multiple($package_data),
      'label'  => t('VAT'),
      'type'   => 'required',
    ],
    'handling'      => [
      'result' => pdfview_calc_handling($package_data),
      'label'  => t('Package handling'),
      'type'   => 'required',
    ],
    'unite'         => [
      'result' => pdfview_calc_unite($package_data),
      'label'  => t('Package unite'),
      'type'   => 'optional',
    ],
    'insurance'     => [
      'result' => pdfview_calc_insurance($package_data),
      'label'  => t('Insurance'),
      'type'   => 'optional',
    ],
    'selfcheck'     => [
      'result' => pdfview_calc_selfcheck($package_data),
      'label'  => t('Self-checking'),
      'type'   => 'required',
    ],
    'make_image'    => [
      'result' => pdfview_calc_make_image($package_data),
      'label'  => t('Make image of the package'),
      'type'   => 'required',
    ],
    'weight_charge' => [
      'result' => pdfview_calc_weight_charge($package_data),
      'label'  => t('Weight fee'),
      'type'   => 'required',
    ],
    'clearance'     => [
      'result' => pdfview_calc_clearance($package_data),
      'label'  => t('Clearance'),
      'type'   => 'required',
    ],
    'delivery'      => [
      'result' => pdfview_calc_delivery($package_data),
      'label'  => t('Delivery'),
      'type'   => 'required',
    ],
    'tax'           => [
      'result' => pdfview_calc_tax($package_data),
      'label'  => t('Tax'),
      'type'   => 'required',
    ],
  ];


  $total = 0;

  foreach ($out as $key => $elem) {

    if (!isset($options['calc_excludes'][$key])) {
      $total += $elem['result'];
    }
    else {
      $out[$key]['result'] = 0;
    }
  }
  /*
    $cprice = new \Drupal\commerce_price\Price($total, 'USD');

    $entity_manager = \Drupal::entityManager();
    $config = \Drupal::configFactory();
    $rounder = new \Drupal\commerce_price\Rounder($entity_manager);

    $exchCalc = new \Drupal\commerce_exchanger\DefaultExchangerCalculator($entity_manager,
    $config, $rounder);


    $current_currency = $_COOKIE['commerce_currency'];

    $total = $exchCalc->priceConversion($cprice, $current_currency)->getNumber();
   */
  $current_currency = 'USD';
  if (!empty($_COOKIE['commerce_currency'])) {
    $current_currency = $_COOKIE['commerce_currency'];
  }
  $total = pdfview_currency_convert($total);

  $out['total'] = [
    'result'   => $total,
    'label'    => t('Total'),
    'currency' => $current_currency,
  ];

  //ddl($out);

  if (!empty($options['number_only'])) {
    return $total;
  }
  return $out;
}

function pdfview_currency_convert($sum, $from = 'USD', $to = NULL) {

  if (!$to && !empty($_COOKIE['commerce_currency'])) {
    $to = $_COOKIE['commerce_currency'];
  }

  if (!$to) {
    $to = 'USD';
  }
  $cprice = new \Drupal\commerce_price\Price($sum, $from);

  $entity_manager = \Drupal::entityManager();
  $config = \Drupal::configFactory();
  $rounder = new \Drupal\commerce_price\Rounder($entity_manager);

  $exchCalc = new \Drupal\commerce_exchanger\DefaultExchangerCalculator($entity_manager,
      $config, $rounder);



  $total = $exchCalc->priceConversion($cprice, $to)->getNumber();

  return $total;
}

function pdfview_currency_format($string, $convert_to_current = TRUE) {

  //ksm($string);
  $number = preg_replace('~[^0-9\.]~', '', $string);

  //ksm($number);

  $currency_code = trim(str_replace($number, '', $string));

  if (!$currency_code) {
    $currency_code = 'USD';
  }

  if ($convert_to_current) {
    if (!empty($_COOKIE['commerce_currency'])) {
      $currency_code = $_COOKIE['commerce_currency'];
    }

    $number = pdfview_currency_convert($number, 'USD', $currency_code);
  }

  $output = $number . ' ' . pdfview_currency_sign($currency_code);

  return $output;
}

function pdfview_currency_sign($currency_code = NULL) {


  if (!$currency_code && !empty($_COOKIE['commerce_currency'])) {
    $currency_code = $_COOKIE['commerce_currency'];
  }

  if (!$currency_code) {
    $currency_code = 'USD';
  }

  $codes = [
    'USD' => '$',
    'ILS' => '₪',
    'EUR' => '€',
  ];

  if (!empty($codes[$currency_code])) {
    return $codes[$currency_code];
  }

  return $currency_code;
}

/**
 * Implements hook_form_alter().
 */
function pdfview_form_alter(&$form, &$form_state, $form_id) {


  if ($form_id == 'calculation_calculation_form') {


    $form['field_calc_dimensions']['widget']['#suffix'] = '<div class="dimensions-image-wrapper"></div>';

    /*
      $form['field_calc_dimensions']['widget']['#after_build'][] = function() {

      }; */

    //ksm($form['field_calc_dimensions']);

    $form['field_calc_dimensions']['widget']['0']['#available_units'] = ['cm', 'in'];
    $form['field_calc_dimensions']['widget']['0']['#default_value']['unit'] = 'in';
    //ksm($form['field_calc_dimensions']);

    $form['field_calc_package_items']['widget']['add_more']['add_more_button_invoice_report_element']['#value']
        = t('Add another item');

    $form['#title'] = t('FlyBuy fee calculator');




    unset($form['actions']);


    $calc_fields_dummy = pdfview_calc_all([]);

    foreach ($calc_fields_dummy as $key => $item) {
      if (isset($item['type']) && $item['type'] == 'optional') {

        $form[$key] = [
          '#type'   => 'checkbox',
          '#title'  => $item['label'],
          '#weight' => 10,
        ];
      }
    }

    $form['calc_button'] = [
      '#markup' => '<div class="button fee-calc-button">' . t('Calculate') . '</div>',
      '#weight' => 11,
    ];

    $form['calc_results'] = [
      '#markup' => '<div class="fee-calc_details-wrapper"></div><div class="fee-calc_results-wrapper"> <span class="fee-calc_results-text">' . t('Total') . ' <span class="fee-calc_results">0</span></span></div>',
      '#weight' => 12,
    ];

    $form['#attached']['library'][] = 'jquery_ui_slider/slider';
    $form['#attached']['library'][] = 'pdfview/pdfview';
    
    $form['#attached']['drupalSettings']['pdfview_tac'] = t('Back to all categories');

    //if (\Drupal::currentUser()->id() == 522) {
      $form['#attached']['library'][] = 'pdfview/pdfview_squares';
    //}
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function pdfview_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb,
    \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {

  $route_name = $route_match->getRouteName();

  $parameters_array = $route_match->getParameters()->all();

  if ($route_name == 'eck.entity.add' && isset($parameters_array['eck_entity_bundle']) &&
      $parameters_array['eck_entity_bundle'] == 'calculation') {
    $links = $breadcrumb->getLinks();

    unset($links[1]);

    //$links[0]->setText(t('FlyBuy fee calculator'));

    $breadcrumb = new \Drupal\Core\Breadcrumb\Breadcrumb();


    $breadcrumb->setLinks($links);

    //ksm ($links);
  }
  // Append the current page title to the breadcrumb for non-admin routes.
  /*
    if ($breadcrumb && !\Drupal::service('router.admin_context')->isAdminRoute()) {

    $title = \Drupal::service('title_resolver')->getTitle(\Drupal::request(), $route_match->getRouteObject());
    if (!empty($title)) {
    $breadcrumb->addLink(\Drupal\Core\Link::createFromRoute($title, '<none>'));
    }
    } */
}
