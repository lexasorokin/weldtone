<?php

define('MESA_MODERATION_MAX_DATE', 1999999999);

use Drupal\Core\Entity\EntityInterface;
use Drupal\mesa_moderation\Event\NodeNotificationIsBeingEvaluated;

function mesa_moderation_views_query_alter($view, $query) {

  if ($view->id() == 'newsletters') {

    $current_year = date('Y', time());

    $current_year_begin_date = strtotime($current_year . '-01-01 00:00:00');

    //ksm($current_year_begin_date);
    //$view->current_display);

    foreach ($query->where as $whkey => $whelem) {

      if (!empty($whelem['conditions'])) {
        foreach ($whelem['conditions'] as $condkey => $condition) {
          if (isset($condition['field']) && is_numeric(strpos($condition['field'],
                      '31605071'))) {

            $query->where[$whkey]['conditions'][$condkey]['field'] = str_replace('31605071',
                $current_year_begin_date, $condition['field']);
          }
        }
      }
    }
  }
}

function mesa_moderation_views_pre_render($view) {

  if ($view->id() == 'moderation_notifications') {

    $users_present = [];

    foreach ($view->result as $item) {
      $node = $item->_entity;

      if ($node->hasField('field_user')) {
        $users_value = $node->get('field_user')->getValue();

        if ($users_value) {
          foreach ($users_value as $user_item) {
            $users_present[$user_item['target_id']] = $user_item['target_id'];
          }
        }
      }
    }

    $users_loaded = \Drupal\user\Entity\User::loadMultiple(array_values($users_present));

    $view->users_loaded = $users_loaded;
  }
}

function mesa_moderation_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'rules_expression_edit') {
    $fields_needed = [
      'to', 'subject', 'message', 'reply', 'language'
    ];

    $field_present = [];
    if (!empty($form['context_definitions'])) {
      foreach ($form['context_definitions'] as $label => $field) {
        if (!is_numeric(strpos($label, '#'))) {
          $fields_present[] = $label;
        }
      }

      if ($fields_needed == $fields_needed) {

        if (!empty($form['context_definitions']['message']['setting']) && empty($form['context_definitions']['message']['setting']['#attributes']['data-autocomplete-path'])) {
          $form['context_definitions']['message']['setting']['#type'] = 'textarea';
        }
      }
    }
  }


  if ($form_id == 'views_exposed_form') {

    if (strpos($form['#id'], 'views-exposed-form-moderation-notifications') === 0) {
      $form['#attached']['library'][] = 'mesa_moderation/mesa_moderation_events_form';
    }
  }

  if (preg_match('~^node_.+?_edit_form$~', $form_id)) {

    if (!empty($form['field_moderational_reminders'])) {
      $node = $form_state->getformObject()->getEntity();

      $reminders_v = $node->get('field_moderational_reminders')->getValue();

      if ($reminders_v) {

        $reminders_dates = [];

        foreach ($reminders_v as $reminder_v) {
          $reminder = \Drupal::entityTypeManager()->getStorage('moderational_reminder')->load($reminder_v['target_id']);

          if ($reminder) {
            $reminders_dates[] = reset(reset($reminder->get('changed')->getValue()));
          }
        }

        $form['field_moderational_reminders']['#suffix'] = t('This content has reminders modified between %min and %max. Are you sure that you do not want modify them before save?',
            ['%min' => date('m/d/Y H:i:s', min($reminders_dates)), '%max' => date('m/d/Y H:i:s',
                  max($reminders_dates))]);
      }
    }
  }
}

function mesa_moderation_preprocess_user(&$variables) {

  $block_manager = \Drupal::service('plugin.manager.block');

  $notifications_block = $block_manager->createInstance('views_block:moderation_notifications-block_1',
      []);

  if ($notifications_block) {
    $variables['content']['moderation_notifications'] = [
      '#type'           => 'container',
      '#attributes'     => [
        'class' => ["moderation_notifications_view_wrapper"],
      ],
      "element-content" => $notifications_block->build(),
      '#weight'         => 0,
    ];
  }
}

/**
 * Implements hook_views_data_alter().
 */
function mesa_moderation_views_data_alter(array &$data) {

  $data['node_revision']['related_users'] = array(
    'title' => t('Related users'),
    'field' => array(
      'title' => t('Related users'),
      'help'  => t('Related users.'),
      'id'    => 'related_users',
    ),
  );

  $data['node']['news_category_from_current_node'] = array(
    'title' => t('News category from current node'),
    'field' => array(
      'title' => t('News category from current node'),
      'help'  => t('News category from current node.'),
      'id'    => 'news_category_from_current_node',
    ),
  );

  $data['node']['current_year_date'] = array(
    'title' => t('Current year date'),
    'field' => array(
      'title' => t('Current year date'),
      'help'  => t('Current year date.'),
      'id'    => 'current_year_date',
    ),
  );
}

function mesa_moderation_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  $type = $entity->getEntityTypeId();

  if ($type == 'node' && $entity->hasField('field_pending_exp_notify') && $entity->hasField('unpublish_on')) {
    $unpub_timestamp = $entity->get('unpublish_on')->getValue();
    $unpub_timestamp = reset($unpub_timestamp);

    $unpub_timestamp_orig = FALSE;
    if (!empty($entity->original)) {
      $unpub_timestamp_orig = $entity->original->get('unpublish_on')->getValue();
      $unpub_timestamp_orig = reset($unpub_timestamp_orig);
    }

    if ($unpub_timestamp && $unpub_timestamp != $unpub_timestamp_orig) {

      $unpub_timestamp = reset($unpub_timestamp);
      $notify_days = [30, 15, 5, 1];

      $pending_notifies = [];

      $current_timestamp = time();

      foreach ($notify_days as $days_num) {

        $add_seconds = $days_num * 3600 * 24;

        $notify_timestamp = $unpub_timestamp - $add_seconds;

        if ($notify_timestamp > $current_timestamp) {
          $pending_notifies[] = $notify_timestamp;
        }
      }

      $entity->set('field_pending_exp_notify', $pending_notifies);
    }
    else if (!$unpub_timestamp) {
      $entity->set('field_pending_exp_notify', []);
    }
  }

  if ($type == 'moderational_reminder') {
    //ksm($entity);
    $expiration_date = $entity->get('field_mr_expiration_date')->getValue();

    $failsafe_unit = 'days';
    $failsafe_period = 1;

    $failsafe_unit_v = $entity->get('field_mr_failsafe_unit')->getValue();
    if ($failsafe_unit_v) {
      $failsafe_unit = $failsafe_unit_v[0]['value'];
    }
    $failsafe_period_v = $entity->get('field_mr_failsafe_number')->getValue();
    if ($failsafe_period_v) {
      $failsafe_period = $failsafe_period_v[0]['value'];
    }

    $units = [
      'days'   => 86400,
      'weeks'  => 86400 * 7,
      'months' => 86400 * 30,
      'years'  => 86400 * 365,
    ];

    $failsafe_value = $periods[$failsafe_unit] * $failsafe_period;

    if ($expiration_date) {
      $current_timestamp = time();
      $timestamp = $expiration_date[0]['value'];

      $day_before_timestamp = max($current_timestamp, $timestamp - 86400);

      $failsafe_notification_timestamp = max($current_timestamp,
          $timestamp - $failsafe_value);

      $next_notification_timestamp = min($day_before_timestamp,
          $current_timestamp + 7 * 86400);

      mesa_moderation_set_ed($entity->id(), $next_notification_timestamp, 'e');
      mesa_moderation_set_ed($entity->id(), $failsafe_notification_timestamp,
          'f');
    }
  }
}

function mesa_moderation_select_pending_notifications() {
  $current_timestamp = time();

  $limit_timestamp = $current_timestamp + 3600 * 24;

  $query = \Drupal::database()->select('node__field_pending_exp_notify', 'f');
  $query->condition('field_pending_exp_notify_value', $limit_timestamp, '<');
  $query->fields('f', ['field_pending_exp_notify_value', 'entity_id']);
  $result = $query->execute();
  $result = $result->fetchAll();

  foreach ($result as $item) {
    mesa_moderation_evaluate_notification($item->entity_id,
        $item->field_pending_exp_notify_value);
  }
}

function mesa_moderation_select_pending_reminders() {

  $current_timestamp = time();

  $limit_timestamp = $current_timestamp + 3600 * 24;

  $query = \Drupal::database()->select('moderational_reminder__field_mr_eed',
      'f');
  $query->condition('field_mr_eed_value', $limit_timestamp, '<');
  $query->fields('f', ['entity_id']);
  $result = $query->execute();
  $result = $result->fetchAll();

  foreach ($result as $item) {
    mesa_moderation_evaluate_reminder($item->entity_id, 'e');
  }

  $query = \Drupal::database()->select('moderational_reminder__field_mr_fed',
      'f');
  $query->condition('field_mr_fed_value', $limit_timestamp, '<');
  $query->fields('f', ['entity_id']);
  $result = $query->execute();
  $result = $result->fetchAll();

  foreach ($result as $item) {
    mesa_moderation_evaluate_reminder($item->entity_id, 'f');
  }
}

function mesa_moderation_evaluate_reminder($reminder, $type = 'e') {
  if (is_numeric($reminder)) {
    $reminder = \Drupal::entityTypeManager()->getStorage('moderational_reminder')->load($reminder);
  }

  if ($reminder) {
    $current_timestamp = time();
    $nids = \Drupal::entityQuery('node')
        ->condition('field_moderational_reminders', $reminder->id())
        ->execute();

    if ($nids) {
      $nid = reset($nids);

      if ($nid) {

        $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
        if ($node) {

          $expiration_date = $reminder->get('field_mr_expiration_date')->getValue();

          $users_v = $reminder->get('field_mr_user')->getValue();

          $users_fail_v = $reminder->get('field_mr_failsafe_user')->getValue();

          $users = [];

          if ($users_v) {
            foreach ($users_v as $user_v) {
              $user = \Drupal::entityTypeManager()->getStorage('user')->load($user_v['target_id']);

              if ($user) {
                $users[] = $user;
              }
            }
          }

          if ($users_fail_v) {
            foreach ($users_fail_v as $user_v) {
              $user = \Drupal::entityTypeManager()->getStorage('user')->load($user_v['target_id']);

              if ($user) {
                $users_fail[] = $user;
              }
            }
          }

          if ($expiration_date) {

            $timestamp = $expiration_date[0]['value'];

            $date_string = date('m/d/Y', $timestamp);

            $modify_link = 'node/' . $node->id();

            if ($type == 'e') {

              if (($current_timestamp - $timestamp) < 86400) {
                foreach ($users as $user) {
                  $event = new ModerationalReminderFinalIsBeingEvaluatedEvent($node,
                      $timestamp, $days_diff, $days_word, $user);
                  $event_dispatcher->dispatch(ModerationalReminderFinalIsBeingEvaluatedEvent::EVENT_NAME,
                      $event);
                }

                mesa_moderation_set_ed($entity->id(), MESA_MODERATION_MAX_DATE,
                    'e');
              }
              else {
                foreach ($users as $user) {
                  $event = new ModerationalReminderIsBeingEvaluatedEvent($node,
                      $timestamp, $days_diff, $days_word, $user);
                  $event_dispatcher->dispatch(ModerationalReminderIsBeingEvaluatedEvent::EVENT_NAME,
                      $event);
                }

                $failsafe_notification_timestamp = max($current_timestamp,
                    $timestamp - 86400);

                $next_notification_timestamp = min($failsafe_notification_timestamp,
                    $current_timestamp + 7 * 86400);

                mesa_moderation_set_ed($entity->id(),
                    $next_notification_timestamp, 'e');
              }
            }
            else if (type == 'f') {
              foreach ($users_fail as $user) {
                $event = new ModerationalReminderFailsafeIsBeingEvaluatedEvent($node,
                    $timestamp, $days_diff, $days_word, $user);
                $event_dispatcher->dispatch(ModerationalReminderFailsafeIsBeingEvaluatedEvent::EVENT_NAME,
                    $event);
              }

              mesa_moderation_set_ed($entity->id(), MESA_MODERATION_MAX_DATE,
                  'f');
            }
          }
        }
      }
    }
  }
}

function mesa_moderation_evaluate_notification($node, $timestamp) {
  if (is_numeric($node)) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
  }

  if ($node) {
    $unpub_timestamp = $node->get('unpublish_on')->getValue();
    $unpub_timestamp = reset($unpub_timestamp);
    $pending_notifications = $node->get('field_pending_exp_notify')->getValue();

    if ($unpub_timestamp) {
      $unpub_timestamp = reset($unpub_timestamp);
    }

    $seconds_diff = $unpub_timestamp - $timestamp;

    $days_diff = $seconds_diff / (3600 * 24);

    $new_notifications = [];

    foreach ($pending_notifications as $pending_notification) {
      if ($pending_notification['value'] != $timestamp) {
        $new_notifications[] = $pending_notification['value'];
      }
    }


    $node->set('field_pending_exp_notify', $new_notifications);
    $node->save();

    $event_dispatcher = \Drupal::service('event_dispatcher');

    $days_word = t('days');

    if ($days_diff < 2) {
      $days_word = t('day');
    }

    $event = new NodeNotificationIsBeingEvaluated($node, $timestamp, $days_diff,
        $days_word);
    $event_dispatcher->dispatch(NodeNotificationIsBeingEvaluated::EVENT_NAME,
        $event);
  }
}

function mesa_moderation_set_ed($reminder_id, $eed, $type = 'e') {

  if (in_array($type, ['e', 'f'])) {

    $table_name = 'moderational_reminder__field_mr_' . $type . 'ed';
    $field_name = 'field_mr_' . $type . 'ed_value';

    $res = \Drupal::database()->select($table_name, 'mr')
        ->fields('mr', ['entity_id'])
        ->condition('entity_id', $reminder_id)
        ->execute();

    if ($res->fetchAssoc()) {
      \Drupal::database()->update($table_name)
          ->fields(
              [
                $field_name => $eed,
              ]
          )
          ->condition('entity_id', $reminder_id)
          ->execute();
      ;
    }
    else {

      \Drupal::database()->insert($table_name)
          ->fields(['bundle', 'deleted', 'entity_id', 'revision_id', 'langcode',
            'delta', $field_name])
          ->values(
              ['bundle'      => 'moderational_reminder',
                'deleted'     => 0,
                'entity_id'   => $reminder_id,
                'revision_id' => $reminder_id,
                'langcode'    => 'en',
                'delta'       => 0,
                $field_name   => $eed,
          ])
          ->execute();
    }
  }
}

/**
 * Implements hook_cron().
 */
function mesa_moderation_cron() {
  mesa_moderation_select_pending_notifications();
  mesa_moderation_select_pending_reminders();
}
