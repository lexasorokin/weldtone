{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'modular-section',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}

{% set bg_image = content.field_bg_image['0']['#markup'] %}
{% set bg_videoo = content.field_videobanner['0']['#markup'] %}


{% import '/themes/civic/templates/macros/additional_styles.twig' as styles %}

{% block paragraph %}

{% if content.field_bg_image %}
  <section class="main-image"
      style="background-image: url({{ bg_image }});"
  >
{% endif %}


<div {{ attributes.addClass(classes, styles.get_styles(content.field_additional_styles)) }}>
    <div class="container">
      {% block content %}

        <div class="content-top">{{ content.field_content }}<div>
        {% if content.field_icon_with_link is not null or content.field_icon_with_link is not empty %}
            <div class="elements-wrapper">{{ content.field_icon_with_link }}<div>
        {% endif %}

      {% endblock %}
    </div>
</div>
  </section>
  <div class="wav-top">
  </div>


      {% block content2 %}
      <div class="container">
        <div class="row">
              <div class="col-md-12">
                    <div class="breadcrumbs">
                    {{ breadcrumbsTheme }}
                    </div>
        </div>  
        </div>  
      {% endblock %}


{% endblock paragraph %}
