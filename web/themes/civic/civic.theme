<?php

use \Drupal\block\Entity\Block;
use Drupal\civic\Blocks;
use Drupal\civic\Events;
use Drupal\civic\Map;
use Drupal\civic\ThemeSettings;
use Drupal\civic\Translations;
use Drupal\civic\Views;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements THEME_form_system_theme_settings_alter()
 */
function civic_form_system_theme_settings_alter(&$form,
    FormStateInterface &$form_state, $form_id = NULL) {
  ThemeSettings::createSettingsForm($form, $form_state, $form_id);
}

/**
 * Implements THEME_preprocess_HOOK()
 */
function civic_preprocess_html(&$vars) {
  Map::initalizeMap($vars);
}

function civic_preprocess_file_link(&$vars) {

  $attributes_array = $vars['attributes']->toArray();

  if (!empty($attributes_array['data-targetblank'])) {
    $vars['link']['#attributes']['target'] = '_blank';
  }
}

function civic_preprocess_field(&$vars) {
  if ($vars['field_name'] == 'field_event_files') {
    if ($vars['items']) {
      foreach ($vars['items'] as $key => $item) {
        $vars['items'][$key]['content']['#attributes']['data-targetblank'] = '1';
      }
    }
  }
}

/**
 * Implements THEME_preprocess_HOOK()
 */
function civic_preprocess_views_view_field(&$vars) {

//ksm($vars['theme_hook_original']);
if (in_array($vars['theme_hook_original'],
          ['views_view_field__events__block_accordion__field_event_files'])) {
  //ksm($vars);
   if (is_object($vars['output'])) {

      $output_string = $vars['output']->__toString();
      $output_string = str_replace('<a ', '<a target="_blank" ', $output_string);
      
      $vars['output'] = $vars['output']->create($output_string);
   }
}
  if (in_array($vars['theme_hook_original'],
          ['views_view_field__events__events_search', 'views_view_field__events__block_2'])) {

    if (is_object($vars['output'])) {


      $output_string = $vars['output']->__toString();

      if (is_numeric(strpos($output_string, 'data-color-placeholder'))) {
        $entity = $vars['row']->_entity;

        $cat_color = 'default';

        if ($entity->hasField('field_event_category')) {
          $cat_vals = $entity->get('field_event_category')->getValue();

          foreach ($cat_vals as $cat_val) {
            $cat_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($cat_val['target_id']);

            if ($cat_term) {
              $cat_color = me_reset_m($cat_term->get('field_ec_color')->getValue());
            }
          }
        }


        $vars['output'] = str_replace('data-color-placeholder=""',
            'style="background-color:' . $cat_color . '";', $output_string);
      }
    }
  }
  if (!isset($GLOBALS['gggg'])) {
    
  }
}

/**
 * Implements THEME_preprocess_HOOK()
 */
function civic_preprocess_views_view_grouping(&$vars) {
  if (is_string($vars['title'])) {
    $title = trim(strip_tags($vars['title']));
  }
  else if (is_object($vars['title'])) {
    $title = trim(strip_tags($vars['title']->__toString()));
  }

  $curyear = date('Y', time());

  if ($title == $curyear) {
    $vars['title_add'] = ' class="active" ';
    $vars['content_add'] = ' class="active" style="display:block;" ';
  }
  else {
    $vars['title_add'] = '';
    $vars['content_add'] = '';
  }
}

/**
 * Implements THEME_preprocess_HOOK()
 */
function civic_page_attachments_alter(array &$page) {
  Map::getMapLocations($page);
}

/**
 * Implements THEME_preprocess_HOOK()
 */
function civic_preprocess_paragraph(&$vars) {
  Map::getFilterOptions($vars);
//Load breadcrumb block and set to a variable to be accessed in the Twig template
  $breadcrumb_block = Block::load('breadcrumbs');
  $breadcrumb_block_content = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($breadcrumb_block);
  $vars['breadcrumbsTheme'] = $breadcrumb_block_content;

  if ($vars['paragraph']->bundle() == 'interactive_map') {

    $vars['#attached']['library'][] = 'civic/mesa_interactive_map';

    $vars['#attached']['drupalSettings']['interactive_map']['success_message'] = $vars['elements']['field_im_success_message'][0]['#context']['value'];
    $vars['#attached']['drupalSettings']['interactive_map']['fail_message'] = $vars['elements']['field_im_fail_message'][0]['#context']['value'];

    if (!empty($vars['elements']['field_im_file'][0]['#markup'])) {
      $vars['downloadable_url'] = $vars['elements']['field_im_file'][0]['#markup'];
    }
  }

  if ($vars['paragraph']->bundle() == 'interactive_map_element') {

    $out = [];

    $out['marker_id'] = $vars['elements']['field_ime_marker_id'][0]['#context']['value'];

    $out['division_name'] = $vars['elements']['field_ime_division_name'][0]['#context']['value'];
    $out['contact_name'] = $vars['elements']['field_ime_contact_name'][0]['#context']['value'];
    $out['label_direction'] = $vars['elements']['field_ime_label_direction'][0]['#markup'];
    $out['polygon_points'] = $vars['elements']['field_ime_polygon_points'][0]['#context']['value'];
    $out['stroke_color'] = $vars['elements']['field_ime_stroke_color'][0]['#context']['value'];
    $out['fill_color'] = $vars['elements']['field_ime_fill_color'][0]['#context']['value'];
    $out['marker_lat'] = $vars['elements']['field_ime_marker_lat'][0]['#context']['value'];
    $out['marker_lon'] = $vars['elements']['field_ime_marker_lon'][0]['#context']['value'];

    $image_url = '';
    if (!empty($vars['elements']['field_ime_contact_image'][0]['#item'])) {
      $image_file_item = $vars['elements']['field_ime_contact_image'][0]['#item']->get('target_id')->getValue();

      if ($image_file_item) {
        $image_file = \Drupal::entityTypeManager()->getStorage('file')->load($image_file_item);

        if ($image_file) {
          $image_url = $image_file->createFileUrl();

          if ($image_url) {
            $image_url = ltrim($image_url, '/');
          }
        }
      }
    }
    $out['image_url'] = $image_url;

    $vars['#attached']['drupalSettings']['interactive_map_elements'][$out['marker_id']]
        = $out;
  }
}

/**
 * Implements hook__preprocess_HOOK().
 */
function civic_preprocess_breadcrumb(&$variables) {

// Removing last element of breadcrumb
  if ($variables['breadcrumb']) {
    $current_path = \Drupal::service('path.current')->getPath();
// Get the real path even if it has an alias.
    $real_path = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
    $key = 'article';
    if (strpos($real_path, $key)) {
// Remove the last element.
//array_pop($variables['breadcrumb']);
    }
  }
}

// /**
//  * Implements THEME_preprocess_breadcrumb()
//  */
// function civic_preprocess_breadcrumb(&$vars) {
//
//
//  //  $request = \Drupal::request();
//  // $route_match = \Drupal::routeMatch();
//  // var_dump($request);
//  // $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
//  //
//  // $variables['#cache']['contexts'][] = 'url';
//  // if (count($variables['breadcrumb']) <= 1) {
//  //   $variables['breadcrumb'] = [];
//  // }
//  // else {
//  //   $breadcrumb_title = theme_get_setting('breadcrumb_title');
//  //   if ($breadcrumb_title) {
//  //     $variables['breadcrumb'][] = array(
//  //       'text' => $page_title
//  //     );
//  //   }
//  // }
//
//
//   // $path = \Drupal::request()->getpathInfo();
//   // $arg  = explode('/',$path);
//   // if(is_numeric($arg[2])){
//   // $node = \Drupal::routeMatch()->getParameter('node');
//   // $vars['nodTitle']= $node->getTitle();
//   // var_dump();
//   // exit($vars);
//   // $vars['breadcrumb'][] = array(
//   //   'text2' => $node->getTitle()
//   // );
//   //}
// }
/**
 * Implements THEME_preprocess_HOOK()
 */
function civic_preprocess_page(&$vars) {
  Translations::processTranslations($vars);
  ThemeSettings::setPageLayoutVars($vars);
}

/**
 * Implements THEME_preprocess_node()
 */
function civic_preprocess_node(&$vars) {
  Blocks::loadBreadcrumbBlock($vars);
  Events::parseDateQueryToVars($vars);
  ThemeSettings::setDefaultImageVars($vars);

  if ($vars['node']->bundle() == 'event') {
    $vars['has_docs'] = FALSE;

    $docs_val = $vars['node']->get('field_event_files')->getValue();
    if ($docs_val) {
      $vars['has_docs'] = TRUE;
    }

    $vars['reg_form'] = '';
    if ($vars['node']->hasField('field_event_registration_enable')) {

      $reg_enable = me_reset_m($vars['node']->get('field_event_registration_enable')->getValue());

      if ($reg_enable) {

        $reg_form = \Drupal::entityTypeManager()->getStorage('webform')->load('event_registration');

        $values = [
          'data' =>
          [
            'event_nid'   => $vars['node']->id(),
            'event_title' => me_reset_m($vars['node']->get('title')->getValue()),
          ]
        ];

        $reg_form = $reg_form->getSubmissionForm($values);

        $vars['reg_form'] = $reg_form;
      }
    }

    $vars['location_link'] = '';
    if (!empty($vars['content']['field_event_location'][0])) {

      $location_val = $vars['node']->get('field_event_location')->getValue();

      if ($location_val) {
        $location_val = $location_val[0]['target_id'];

        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($location_val);

        if ($term) {
          $lat = civic_reset_m($term->get('field_eloc_lattitude')->getValue());
          $lon = civic_reset_m($term->get('field_eloc_longitude')->getValue());

          $vars['location_link'] = 'https://www.google.com/maps/place/' . urlencode($vars['content']['field_event_location'][0]['#plain_text']) . '/@' . $lat . ',' . $lon;
        }
      }
    }
  }
}

/**
 * Implements THEME_theme_suggestions_HOOK_alter()
 */
function civic_theme_suggestions_block_alter(&$suggestions, &$vars) {
  Blocks::addBlockTypeSuggestion($suggestions, $vars);
}

/**
 * Implements THEME_theme_suggestions_HOOK_alter()
 */
function civic_theme_suggestions_views_view_alter(&$suggestions, &$vars) {
  Views::addViewsViewTemplateSuggestions($suggestions, $vars);
}

/**
 * Implements THEME_preprocess_HOOK()
 */
function civic_preprocess_links__language_block(&$vars) {
  ThemeSettings::getTranslateIcon($vars);
}

function civic_theme_suggestions_page_alter(array &$suggestions,
    array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (isset($node)) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

function civic_theme_suggestions_pager_alter(array &$suggestions,
    array $variables, $hook) {
//ksm($suggestions);
//ksm($variables);
//ksm($hook);
  if (!empty($variables['pager']['#theme'])) {
    $suggestions = [];

    foreach ($variables['pager']['#theme'] as $suggestion) {
      $suggestions[] = $suggestion;
    }
  }
}

/**
 * Helper function that resets arrays of any deepness and accepts 
 * not only variables as an argument.
 */
function civic_reset_m($var, $num = 99) {
  for ($i = 0; $i < $num; $i++) {

    if (is_array($var)) {
      $var = reset($var);
    }
    else {
      return $var;
    }
  }
  return $var;
}
